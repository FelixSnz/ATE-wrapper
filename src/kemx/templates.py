


""" 
The Module 'templates' provides the needed utilities to handle recorded test results
from the generated csv file of the ATE test software.
"""
from __future__ import annotations
__all__ = ("Records", "Records.Test")



import pandas as pd
from pandas import DataFrame
import re
import numpy as np

from ate.pcf import Pcf

    
class Record:
    """
    Describes record (row) of csv file, the record contains all the
    information generated by a finished test sequence
    """

    def __init__(self, data:pd.Series) -> None:
        self.data = data
    
    @property
    def passed(self) -> bool:
        pass

    @property
    def tests(self) -> list[Test]:
        return [self.Test(self, test_name, self.data.get(test_name)) for test_name in self.data.keys()]
    
    @property
    def measurements(self):
        return [test.meas for test in self.tests]
    
    def __getitem__(self, test_name:str) -> Test:
        for test in self.tests:
            if test_name == test._name:
                return test
        raise KeyError(test_name)
    
    def __repr__(self) -> str:
        return repr(self.data)
    
    def __get_failed_tests(self) -> list[Test]:
        pass

    def get_failstring(self):
        pass
    
    
    class Test:

        """
        Describes single specific test, where each test is contained in a Record
        """

        def __init__(self, outer:Record, name:str, data) -> None:
            if not isinstance(outer, Record):
                raise TypeError(f"exp type: {Record}, recv type {type(outer)}")
            self._name = name
            self.data = data
            self.operator = None
            self.record = outer
        
        @property
        def status(self) -> bool:
            pass
            
        @property
        def meas(self):
            pass
            
        
        @property
        def nominal(self) -> float:
            pass
        

        def __repr__(self) -> str:
            return f'{self._name} : {self.data}'

        


